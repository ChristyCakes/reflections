When would you want to use a remote repository rather than keeping all your work local?
A remote repository provides access to the files from any computer with internet. You may want to use that if you'll be at a different computer or if someone else is working on the project. Or you'd rather store it online for space issues or backup security.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You may want to pull only certain commits or branches. You may want to work with branches or commits one at a time or in specified groups and pull manually to keep yourself organized.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork is a repository clone only on GitHub between two users. A clone is a copy of a repository. It can be done from GitHub to local computer, between 2 local computer locations, or from two repositories on GitHub, but it would be called a fork in that case. A branch is a part of the repository that has commits on it. A branch may be used for different users or different tasks on the same project. If you want to work on your own stuff and not share it with the creator, you'd use fork. If you want to work with someone on a project, you'd use clone and/or branches.

What is the benefit of having a copy of the last known state of the remote stored locally?
The benefit is that you have the branches and can look at changes using git diff and without using the internet.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
We'd have to collaborate using email, dropbox, or google docs. It's not so easy to see old versions on those. It would be easier and quicker to acces, not a long process of commit, push, pull, etc. like on github. GitHub feels more secure because it is way more organized in going back to old versions.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
You might make changes in a separate branch when you have a specific change to make with a collaborator. The benefit is staying organized but it means taking more steps later to merge into master.